From 512a2dc541946be1a4fe7e3effc76abcc2d982d9 Mon Sep 17 00:00:00 2001
From: Peter Palfrader <peter@palfrader.org>
Date: Sun, 3 Jun 2012 22:20:30 +0200
Subject: [PATCH 73/95] Revert "Fix for mmc timeouts when erasing multiple blocks"

This reverts commit 84045e4d40677ec9322357bdb0fbeaa16c6d25fa.

Conflicts:

	arch/arm/mach-bcm2708/power.c
	drivers/mmc/host/sdhci-bcm2708.c
---
 arch/arm/mach-bcm2708/power.c    |   10 ++--
 drivers/mmc/host/sdhci-bcm2708.c |   99 ++------------------------------------
 drivers/mmc/host/sdhci.c         |    7 +--
 3 files changed, 12 insertions(+), 104 deletions(-)

diff --git a/arch/arm/mach-bcm2708/power.c b/arch/arm/mach-bcm2708/power.c
index d147bb6..256bf1a 100644
--- a/arch/arm/mach-bcm2708/power.c
+++ b/arch/arm/mach-bcm2708/power.c
@@ -14,7 +14,6 @@
 #include <linux/module.h>
 #include <linux/semaphore.h>
 #include <linux/bug.h>
-#include <linux/delay.h>
 #include <mach/power.h>
 #include <mach/vcio.h>
 #include <mach/arm_power.h>
@@ -97,6 +96,7 @@ int bcm_power_request(BCM_POWER_HANDLE_T handle, uint32_t request)
 				bcm_mailbox_write(MBOX_CHAN_POWER,
 						  global_request << 4);
 
+				/* Wait for a response during power-up */
 				if (global_request & ~g_state.global_request) {
 					rc = bcm_mailbox_read(MBOX_CHAN_POWER,
 							      &actual);
@@ -111,14 +111,14 @@ int bcm_power_request(BCM_POWER_HANDLE_T handle, uint32_t request)
 
 				if (rc == 0) {
 					if (actual != global_request) {
-						printk(KERN_INFO
-						     "%s: Fail: prev global %x, new global %x, actual %x request %x, others_request %x\n",
+						printk(KERN_ERR
+						     "%s: prev global %x, new global %x, actual %x, request %x, others_request %x\n",
 						     __func__,
 						     g_state.global_request,
 						     global_request, actual, request, others_request);
 						/* A failure */
-					//	BUG_ON((others_request & actual)
-					//	       != others_request);
+						BUG_ON((others_request & actual)
+						       != others_request);
 						request &= actual;
 						rc = -EIO;
 					}
diff --git a/drivers/mmc/host/sdhci-bcm2708.c b/drivers/mmc/host/sdhci-bcm2708.c
index 7136998..3fe165a 100644
--- a/drivers/mmc/host/sdhci-bcm2708.c
+++ b/drivers/mmc/host/sdhci-bcm2708.c
@@ -26,9 +26,7 @@
 #include <linux/highmem.h>
 #include <linux/platform_device.h>
 #include <linux/module.h>
-#include <linux/mmc/mmc.h>
 #include <linux/mmc/host.h>
-#include <linux/mmc/sd.h>
 
 #include <linux/io.h>
 #include <linux/dma-mapping.h>
@@ -73,9 +71,6 @@
 
 #define BCM2708_SDHCI_SLEEP_TIMEOUT 1000   /* msecs */
 
-/* Mhz clock that the EMMC core is running at. Should match the platform clockman settings */
-#define BCM2708_EMMC_CLOCK_FREQ 80000000
-
 #define POWER_OFF 0
 #define POWER_LAZY_OFF 1
 #define POWER_ON  2
@@ -230,12 +225,7 @@ u8 sdhci_bcm2708_readb(struct sdhci_host *host, int reg)
 
 static void sdhci_bcm2708_raw_writel(struct sdhci_host *host, u32 val, int reg)
 {
-	u32 ier;
-
 #if USE_SPACED_WRITES_2CLK
-	static bool timeout_disabled = false;
-	unsigned int ns_2clk = 0;
-        
 	/* The Arasan has a bugette whereby it may lose the content of
 	 * successive writes to registers that are within two SD-card clock
 	 * cycles of each other (a clock domain crossing problem).
@@ -247,7 +237,7 @@ static void sdhci_bcm2708_raw_writel(struct sdhci_host *host, u32 val, int reg)
 		/* host->clock is the clock freq in Hz */
 		static hptime_t last_write_hpt;
 		hptime_t now = hptime();
-		ns_2clk = 2000000000/host->clock;
+		unsigned int ns_2clk = 2000000000/host->clock;
 
 		if (now == last_write_hpt || now == last_write_hpt+1) {
 			 /* we can't guarantee any significant time has
@@ -263,27 +253,6 @@ static void sdhci_bcm2708_raw_writel(struct sdhci_host *host, u32 val, int reg)
 		}
 		last_write_hpt = now;
 	}
-#if USE_SOFTWARE_TIMEOUTS
-	/* The Arasan is clocked for timeouts using the SD clock which is too
-	 * fast for ERASE commands and causes issues. So we disable timeouts
-	 * for ERASE */
-	if (host->cmd != NULL && host->cmd->opcode == MMC_ERASE &&
-            reg == (SDHCI_COMMAND & ~3)) {
-		mod_timer(&host->timer,
-                          jiffies + SOFTWARE_ERASE_TIMEOUT_SEC * HZ);
-		ier = readl(host->ioaddr + SDHCI_SIGNAL_ENABLE);
-		ier &= ~SDHCI_INT_DATA_TIMEOUT;
-		writel(ier, host->ioaddr + SDHCI_SIGNAL_ENABLE);
-		timeout_disabled = true;
-		udelay((ns_2clk+1000-1)/1000);
-	} else if (timeout_disabled) {
-		ier = readl(host->ioaddr + SDHCI_SIGNAL_ENABLE);
-		ier |= SDHCI_INT_DATA_TIMEOUT;
-		writel(ier, host->ioaddr + SDHCI_SIGNAL_ENABLE);
-		timeout_disabled = false;
-		udelay((ns_2clk+1000-1)/1000);
-	}
-#endif
 	writel(val, host->ioaddr + reg);
 #else
 	void __iomem * regaddr = host->ioaddr + reg;
@@ -359,68 +328,14 @@ void sdhci_bcm2708_writeb(struct sdhci_host *host, u8 val, int reg)
 
 static unsigned int sdhci_bcm2708_get_max_clock(struct sdhci_host *host)
 {
-	return 20000000;	// this value is in Hz (20MHz)
+	return 100000000;	// this value is in Hz (100MHz/4)
 }
 
 static unsigned int sdhci_bcm2708_get_timeout_clock(struct sdhci_host *host)
 {
-	if(host->clock)
-		return (host->clock / 1000);		// this value is in kHz (100MHz)
-	else
-		return (sdhci_bcm2708_get_max_clock(host) / 1000);
+	return 100000;		// this value is in kHz (100MHz/4)
 }
 
-static void sdhci_bcm2708_set_clock(struct sdhci_host *host, unsigned int clock)
-{
-	int div = 0;
-	u16 clk = 0;
-	unsigned long timeout;
-
-        if (clock == host->clock)
-                return;
-
-        sdhci_writew(host, 0, SDHCI_CLOCK_CONTROL);
-
-        if (clock == 0)
-                goto out;
-
-	if (BCM2708_EMMC_CLOCK_FREQ <= clock)
-		div = 1;
-	else {
-		for (div = 2; div < SDHCI_MAX_DIV_SPEC_300; div += 2) {
-			if ((BCM2708_EMMC_CLOCK_FREQ / div) <= clock)
-				break;
-		}
-	}
-
-        DBG( "desired SD clock: %d, actual: %d\n",
-                clock, BCM2708_EMMC_CLOCK_FREQ / div);
-
-	clk |= (div & SDHCI_DIV_MASK) << SDHCI_DIVIDER_SHIFT;
-	clk |= ((div & SDHCI_DIV_HI_MASK) >> SDHCI_DIV_MASK_LEN)
-		<< SDHCI_DIVIDER_HI_SHIFT;
-	clk |= SDHCI_CLOCK_INT_EN;
-
-	sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
-
-        timeout = 20;
-        while (!((clk = sdhci_readw(host, SDHCI_CLOCK_CONTROL))
-                        & SDHCI_CLOCK_INT_STABLE)) {
-                if (timeout == 0) {
-			printk(KERN_ERR "%s: Internal clock never "
-				"stabilised.\n", mmc_hostname(host->mmc));
-                        return;
-                }
-                timeout--;
-                mdelay(1);
-        }
-
-        clk |= SDHCI_CLOCK_CARD_EN;
-        sdhci_writew(host, clk, SDHCI_CLOCK_CONTROL);
-out:
-        host->clock = clock;
- }
-
 /*****************************************************************************\
  *									     *
  * DMA Operation							     *
@@ -1308,7 +1223,7 @@ static struct sdhci_ops sdhci_bcm2708_ops = {
 #error The BCM2708 SDHCI driver needs CONFIG_MMC_SDHCI_IO_ACCESSORS to be set
 #endif
 	//.enable_dma = NULL,
-	.set_clock = sdhci_bcm2708_set_clock,
+	//.set_clock = NULL,
 	.get_max_clock = sdhci_bcm2708_get_max_clock,
 	//.get_min_clock = NULL,
 	.get_timeout_clock = sdhci_bcm2708_get_timeout_clock,
@@ -1372,9 +1287,7 @@ static int __devinit sdhci_bcm2708_probe(struct platform_device *pdev)
 	host->irq = platform_get_irq(pdev, 0);
 
 	host->quirks = SDHCI_QUIRK_BROKEN_CARD_DETECTION |
-		       SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK |
-		       SDHCI_QUIRK_BROKEN_TIMEOUT_VAL |
-		       SDHCI_QUIRK_NONSTANDARD_CLOCK;
+		       SDHCI_QUIRK_DATA_TIMEOUT_USES_SDCLK;
 #ifdef CONFIG_MMC_SDHCI_BCM2708_DMA
 	host->flags = SDHCI_USE_PLATDMA;
 #endif
@@ -1441,8 +1354,6 @@ static int __devinit sdhci_bcm2708_probe(struct platform_device *pdev)
 	    host_priv->cb_base, (unsigned)host_priv->cb_handle,
 	    host_priv->dma_chan, host_priv->dma_chan_base,
 	    host_priv->dma_irq);
-
-	host->mmc->caps |= MMC_CAP_SD_HIGHSPEED | MMC_CAP_MMC_HIGHSPEED;
 #endif
 
 	ret = sdhci_add_host(host);
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 22105e5..e147db2 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -2927,11 +2927,8 @@ int sdhci_add_host(struct sdhci_host *host)
 			mmc->caps |= MMC_CAP_MAX_CURRENT_200;
 	}
 
-	if(host->ops->voltage_broken) {
-		ocr_avail |= MMC_VDD_32_33 | MMC_VDD_33_34;
-		// Cannot support UHS modes is we are stuck at 3.3V;
-		mmc->caps &= ~(MMC_CAP_UHS_SDR12 | MMC_CAP_UHS_SDR25 | MMC_CAP_UHS_SDR104 | MMC_CAP_UHS_SDR50 | MMC_CAP_UHS_DDR50);
-	}
+	if(host->ops->voltage_broken)
+		ocr_avail |= MMC_VDD_29_30 | MMC_VDD_30_31;
 
 	mmc->ocr_avail = ocr_avail;
 	mmc->ocr_avail_sdio = ocr_avail;
-- 
1.7.0.4

