From f58fe8a27840929bc9bd39bf08e18b0120a9f2f7 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Tue, 7 Aug 2012 22:24:16 +0100
Subject: [PATCH 108/205] Some fixed for ALSA. Mute and volume changing should be improved

---
 sound/arm/bcm2835-ctl.c   |   76 +++++++++++++++++-----------
 sound/arm/bcm2835-pcm.c   |   24 ++++++---
 sound/arm/bcm2835-vchiq.c |   34 +++++++++---
 sound/arm/bcm2835.h       |  123 +++++++--------------------------------------
 4 files changed, 106 insertions(+), 151 deletions(-)

diff --git a/sound/arm/bcm2835-ctl.c b/sound/arm/bcm2835-ctl.c
index f901ddd..0c1b80a 100755
--- a/sound/arm/bcm2835-ctl.c
+++ b/sound/arm/bcm2835-ctl.c
@@ -33,29 +33,22 @@
 
 #include "bcm2835.h"
 
-
-/* functions to convert alsa to chip volume and back. */
-int alsa2chip(int vol)
-{
-	return -((vol << 8) / 100);
-}
-
-int chip2alsa(int vol)
-{
-	return -((vol * 100) >> 8);
-}
+/* volume maximum and minimum in terms of 0.01dB */
+#define CTRL_VOL_MAX 400
+#define CTRL_VOL_MIN -10239 /* originally -10240 */
 
 
 static int snd_bcm2835_ctl_info(struct snd_kcontrol *kcontrol,
 				struct snd_ctl_elem_info *uinfo)
 {
+	audio_info(" ... IN ");
 	if (kcontrol->private_value == PCM_PLAYBACK_VOLUME) {
 		uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
 		uinfo->count = 1;
-		uinfo->value.integer.min = -10240;
-		uinfo->value.integer.max = 400;      /* 2303 */
+		uinfo->value.integer.min = CTRL_VOL_MIN;
+		uinfo->value.integer.max = CTRL_VOL_MAX;      /* 2303 */
 	} else if (kcontrol->private_value == PCM_PLAYBACK_MUTE) {
-		uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+		uinfo->type = SNDRV_CTL_ELEM_TYPE_BOOLEAN;
 		uinfo->count = 1;
 		uinfo->value.integer.min = 0;
 		uinfo->value.integer.max = 1;
@@ -63,12 +56,38 @@ static int snd_bcm2835_ctl_info(struct snd_kcontrol *kcontrol,
 		uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
 		uinfo->count = 1;
 		uinfo->value.integer.min = 0;
-		uinfo->value.integer.max = AUDIO_DEST_MAX-0;
+		uinfo->value.integer.max = AUDIO_DEST_MAX-1;
 	}
-
+	audio_info(" ... OUT ");
 	return 0;
 }
 
+/* toggles mute on or off depending on the value of nmute, and returns
+ * 1 if the mute value was changed, otherwise 0
+ */
+static int toggle_mute(struct bcm2835_chip *chip, int nmute)
+{
+	/* if settings are ok, just return 0 */
+	if(chip->mute == nmute)
+		return 0;
+
+	/* if the sound is muted then we need to unmute */
+	if(chip->mute == CTRL_VOL_MUTE)
+	{
+		chip->volume = chip->old_volume; /* copy the old volume back */
+		audio_info("Unmuting, old_volume = %d, volume = %d ...", chip->old_volume, chip->volume);
+	}
+	else /* otherwise we mute */
+	{
+		chip->old_volume = chip->volume;
+		chip->volume = 26214; /* set volume to minimum level AKA mute */
+		audio_info("Muting, old_volume = %d, volume = %d ...", chip->old_volume, chip->volume);
+	}
+
+	chip->mute = nmute;
+	return 1;
+}
+
 static int snd_bcm2835_ctl_get(struct snd_kcontrol *kcontrol,
 			       struct snd_ctl_elem_value *ucontrol)
 {
@@ -93,9 +112,10 @@ static int snd_bcm2835_ctl_put(struct snd_kcontrol *kcontrol,
 	int changed = 0;
 
 	if (kcontrol->private_value == PCM_PLAYBACK_VOLUME) {
-		if (chip->mute) {
-			chip->mute = 0;
-			changed = 1;
+		audio_info("Volume change attempted.. volume = %d new_volume = %d", chip->volume, (int)ucontrol->value.integer.value[0]);
+		if (chip->mute == CTRL_VOL_MUTE) {
+			/* changed = toggle_mute(chip, CTRL_VOL_UNMUTE); */
+			return 1; /* should return 0 to signify no change but the mixer takes this as the opposite sign (no idea why) */
 		}
 		if (changed
 		    || (ucontrol->value.integer.value[0] != chip2alsa(chip->volume))) {
@@ -105,11 +125,10 @@ static int snd_bcm2835_ctl_put(struct snd_kcontrol *kcontrol,
 		}
 
 	} else if (kcontrol->private_value == PCM_PLAYBACK_MUTE) {
-		/* Not implemented */
-		if (ucontrol->value.integer.value[0] != chip->mute) {
-			chip->mute = ucontrol->value.integer.value[0];
-			changed = 0;
-		}
+		/* Now implemented */
+		audio_info(" Mute attempted");
+		changed = toggle_mute(chip, ucontrol->value.integer.value[0]);
+
 	} else if (kcontrol->private_value == PCM_PLAYBACK_DEVICE) {
 		if (ucontrol->value.integer.value[0] != chip->dest) {
 			chip->dest = ucontrol->value.integer.value[0];
@@ -125,22 +144,21 @@ static int snd_bcm2835_ctl_put(struct snd_kcontrol *kcontrol,
 	return changed;
 }
 
-static DECLARE_TLV_DB_SCALE(snd_bcm2835_db_scale, -10240, 1, 1);
+static DECLARE_TLV_DB_SCALE(snd_bcm2835_db_scale, CTRL_VOL_MIN, 1, 1);
 
 static struct snd_kcontrol_new snd_bcm2835_ctl[] __devinitdata = {
 	{
 	 .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
 	 .name = "PCM Playback Volume",
 	 .index = 0,
-	 .access =
-	 SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE,
+	 .access = SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_TLV_READ,
 	 .private_value = PCM_PLAYBACK_VOLUME,
 	 .info = snd_bcm2835_ctl_info,
 	 .get = snd_bcm2835_ctl_get,
 	 .put = snd_bcm2835_ctl_put,
 	 .count = 1,
 	 .tlv = {.p = snd_bcm2835_db_scale}
-	 },
+	},
 	{
 	 .iface = SNDRV_CTL_ELEM_IFACE_MIXER,
 	 .name = "PCM Playback Switch",
@@ -162,7 +180,7 @@ static struct snd_kcontrol_new snd_bcm2835_ctl[] __devinitdata = {
 	 .get = snd_bcm2835_ctl_get,
 	 .put = snd_bcm2835_ctl_put,
 	 .count = 1,
-	 },
+	},
 };
 
 int __devinit snd_bcm2835_new_ctl(bcm2835_chip_t * chip)
diff --git a/sound/arm/bcm2835-pcm.c b/sound/arm/bcm2835-pcm.c
index ff3eb4e..6cc80dd 100755
--- a/sound/arm/bcm2835-pcm.c
+++ b/sound/arm/bcm2835-pcm.c
@@ -26,11 +26,11 @@ static struct snd_pcm_hardware snd_bcm2835_playback_hw = {
 	.rate_max = 48000,
 	.channels_min = 1,
 	.channels_max = 2,
-	.buffer_bytes_max = (4 * 8 - 1) * 1024,	/* Needs to be less than audioplay buffer size */
+	.buffer_bytes_max = 32 * 1024,	/* Needs to be less than audioplay buffer size */
 	.period_bytes_min = 1 * 1024,
-	.period_bytes_max = (4 * 8 - 1) * 1024,
+	.period_bytes_max = 32 * 1024,
 	.periods_min = 1,
-	.periods_max = 4 * 8 - 1,
+	.periods_max = 32,
 };
 
 static void snd_bcm2835_playback_free(struct snd_pcm_runtime *runtime)
@@ -64,14 +64,18 @@ static irqreturn_t bcm2835_playback_fifo_irq(int irq, void *dev_id)
 		    ((alsa_stream->pos + consumed) / alsa_stream->period_size))
 			new_period = 1;
 	}
-	audio_debug("updating pos cur: %d + %d max:%d new_period:%d\n",
+	audio_debug("updating pos cur: %d + %d max:%d period_bytes:%d, hw_ptr: %d new_period:%d\n",
 		      alsa_stream->pos,
-		      (consumed /** AUDIO_IPC_BLOCK_BUFFER_SIZE*/ ),
-		      alsa_stream->buffer_size, new_period);
+		      consumed,
+		      alsa_stream->buffer_size,
+			  (int)(alsa_stream->period_size*alsa_stream->substream->runtime->periods),
+			  frames_to_bytes(alsa_stream->substream->runtime, alsa_stream->substream->runtime->status->hw_ptr),
+			  new_period);
 	if (alsa_stream->buffer_size) {
 		alsa_stream->pos += consumed;
 		alsa_stream->pos %= alsa_stream->buffer_size;
 	}
+
 	if (alsa_stream->substream) {
 		if (new_period)
 			snd_pcm_period_elapsed(alsa_stream->substream);
@@ -135,7 +139,6 @@ static int snd_bcm2835_playback_open(struct snd_pcm_substream *substream)
 	runtime->private_data = alsa_stream;
 	runtime->private_free = snd_bcm2835_playback_free;
 	runtime->hw = snd_bcm2835_playback_hw;
-
 	/* minimum 16 bytes alignment (for vchiq bulk transfers) */
 	snd_pcm_hw_constraint_step(runtime, 0, SNDRV_PCM_HW_PARAM_PERIOD_BYTES,
 				   16);
@@ -224,6 +227,10 @@ static int snd_bcm2835_pcm_hw_params(struct snd_pcm_substream *substream,
 	}
 
 	bcm2835_audio_setup(alsa_stream);
+
+	/* in preparation of the stream, set the controls (volume level) of the stream */
+	bcm2835_audio_set_ctls(alsa_stream->chip);
+
 	audio_info(" .. OUT\n");
 
 	return err;
@@ -382,7 +389,8 @@ int __devinit snd_bcm2835_new_pcm(bcm2835_chip_t * chip)
 	strcpy(pcm->name, "bcm2835 ALSA");
 	chip->pcm = pcm;
 	chip->dest = AUDIO_DEST_AUTO;
-	chip->volume = 100;
+	chip->volume = alsa2chip(0);
+	chip->mute = CTRL_VOL_UNMUTE;	/*disable mute on startup */
 	/* set operators */
 	snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK,
 			&snd_bcm2835_playback_ops);
diff --git a/sound/arm/bcm2835-vchiq.c b/sound/arm/bcm2835-vchiq.c
index 23c0aa3..68d838d 100755
--- a/sound/arm/bcm2835-vchiq.c
+++ b/sound/arm/bcm2835-vchiq.c
@@ -43,12 +43,18 @@
 
 /* Default VCOS logging level */
 #define LOG_LEVEL  VCOS_LOG_WARN
-
 /* Logging macros (for remapping to other logging mechanisms, i.e., printf) */
-#define LOG_ERR( fmt, arg... )   vcos_log_error( "%s:%d " fmt, __func__, __LINE__, ##arg)
-#define LOG_WARN( fmt, arg... )  vcos_log_warn( "%s:%d " fmt, __func__, __LINE__, ##arg)
-#define LOG_INFO( fmt, arg... )  vcos_log_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
-#define LOG_DBG( fmt, arg... )   vcos_log_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+#ifdef AUDIO_DEBUG_ENABLE
+	#define LOG_ERR( fmt, arg... )   pr_err( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_WARN( fmt, arg... )  pr_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_INFO( fmt, arg... )  pr_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_DBG( fmt, arg... )   pr_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+#else
+	#define LOG_ERR( fmt, arg... ) vcos_log_error( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_WARN( fmt, arg... ) vcos_log_warn( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_INFO( fmt, arg... ) vcos_log_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+	#define LOG_DBG( fmt, arg... ) vcos_log_info( "%s:%d " fmt, __func__, __LINE__, ##arg)
+#endif
 
 typedef struct opaque_AUDIO_INSTANCE_T {
 	uint32_t num_connections;
@@ -103,7 +109,7 @@ int bcm2835_audio_start(bcm2835_alsa_stream_t * alsa_stream)
 	LOG_DBG(" .. IN\n");
 	if (alsa_stream->my_wq) {
 		my_work_t *work = kmalloc(sizeof(my_work_t), GFP_ATOMIC);
-		/* Queue some work (item 1) */
+		/*--- Queue some work (item 1) ---*/
 		if (work) {
 			INIT_WORK((struct work_struct *)work, my_wq_function);
 			work->alsa_stream = alsa_stream;
@@ -124,7 +130,7 @@ int bcm2835_audio_stop(bcm2835_alsa_stream_t * alsa_stream)
 	LOG_DBG(" .. IN\n");
 	if (alsa_stream->my_wq) {
 		my_work_t *work = kmalloc(sizeof(my_work_t), GFP_ATOMIC);
-		/* Queue some work (item 1) */
+		 /*--- Queue some work (item 1) ---*/
 		if (work) {
 			INIT_WORK((struct work_struct *)work, my_wq_function);
 			work->alsa_stream = alsa_stream;
@@ -142,6 +148,7 @@ int bcm2835_audio_stop(bcm2835_alsa_stream_t * alsa_stream)
 void my_workqueue_init(bcm2835_alsa_stream_t * alsa_stream)
 {
 	alsa_stream->my_wq = create_workqueue("my_queue");
+	return;
 }
 
 void my_workqueue_quit(bcm2835_alsa_stream_t * alsa_stream)
@@ -151,6 +158,7 @@ void my_workqueue_quit(bcm2835_alsa_stream_t * alsa_stream)
 		destroy_workqueue(alsa_stream->my_wq);
 		alsa_stream->my_wq = NULL;
 	}
+	return;
 }
 
 static void audio_vchi_callback(void *param,
@@ -501,14 +509,22 @@ int bcm2835_audio_set_ctls(bcm2835_chip_t * chip)
 	int i;
 	int ret = 0;
 	LOG_DBG(" .. IN\n");
+
 	/* change ctls for all substreams */
 	for (i = 0; i < MAX_SUBSTREAMS; i++) {
 		if (chip->avail_substreams & (1 << i)) {
 			if (!chip->alsa_stream[i])
+			{
+				LOG_DBG(" No ALSA stream available?! ");
 				ret = 0;
-			else if (bcm2835_audio_set_ctls_chan
+			}
+			else if (bcm2835_audio_set_ctls_chan /* returns 0 on success */
 				 (chip->alsa_stream[i], chip) != 0)
-				ret = -1;
+				 {
+					LOG_DBG("Couldn't set the controls for stream %d", i);
+					ret = -1;
+				 }
+			LOG_DBG(" Controls set for stream %d", i);
 		}
 	}
 	LOG_DBG(" .. OUT ret=%d\n", ret);
diff --git a/sound/arm/bcm2835.h b/sound/arm/bcm2835.h
index 134a483..3db5e51 100755
--- a/sound/arm/bcm2835.h
+++ b/sound/arm/bcm2835.h
@@ -15,8 +15,6 @@
 #ifndef __SOUND_ARM_BCM2835_H
 #define __SOUND_ARM_BCM2835_H
 
-#define SUBSTREAM_NUM 1
-
 #include <linux/device.h>
 #include <linux/list.h>
 #include <linux/interrupt.h>
@@ -27,13 +25,14 @@
 #include <sound/pcm_params.h>
 #include <linux/workqueue.h>
 
-/* #define DUMP_RAW_DATA */
-//#define AUDIO_DEBUG_ENABLE
-//#define AUDIO_VERBOSE_DEBUG_ENABLE
+/*
+#define AUDIO_DEBUG_ENABLE
+#define AUDIO_VERBOSE_DEBUG_ENABLE
+*.
 
 /* Debug macros */
-#ifdef AUDIO_DEBUG_ENABLE
 
+#ifdef AUDIO_DEBUG_ENABLE
 #ifdef AUDIO_VERBOSE_DEBUG_ENABLE
 
 #define audio_debug(fmt, arg...)	\
@@ -44,17 +43,17 @@
 
 #else
 
-#define audio_debug(fmt, arg...)	do {} while (0)
+#define audio_debug(fmt, arg...)
 
-#define audio_info(fmt, arg...)	        do {} while (0)
+#define audio_info(fmt, arg...)
 
 #endif /* AUDIO_VERBOSE_DEBUG_ENABLE */
 
 #else
 
-#define audio_debug(fmt, arg...)	do {} while (0)
+#define audio_debug(fmt, arg...)
 
-#define audio_info(fmt, arg...)		do {} while (0)
+#define audio_info(fmt, arg...)
 
 #endif /* AUDIO_DEBUG_ENABLE */
 
@@ -69,75 +68,15 @@
 
 #define MAX_SUBSTREAMS			(8)
 #define AVAIL_SUBSTREAMS_MASK		(0xff)
+enum {
+	CTRL_VOL_MUTE,
+	CTRL_VOL_UNMUTE
+};
 
-#define AUDIO_IPC_BLOCK_NUM_BUFFERS    (8)
-#define AUDIO_IPC_BLOCK_BUFFER_SIZE    (1024*8)
-
-#define AUDIO_CONTROL_OFFSET			(0x00)
-#define CTRL_EN_SHIFT			(0)
-#define CTRL_EN_MASK			(0x00000001)
-#define CTRL_PLAY_SHIFT			(1)
-#define CTRL_PLAY_MASK			(0x00000002)
-#define CTRL_MUTE_SHIFT			(2)
-#define CTRL_MUTE_MASK			(0x00000004)
-#define CTRL_SETUP_SHIFT		(3)
-#define CTRL_SETUP_MASK			(0x00000008)
-#define CTRL_FLUSH_SHIFT	    (4)
-#define CTRL_FLUSH_MASK			(0x00000010)
-#define CTRL_STOPMODE_SHIFT	    (5)
-#define CTRL_STOPMODE_MASK		(0x00000020)
-
-#define AUDIO_STATUS_OFFSET			(0x04)
-#define STAT_EN_SHIFT			(0)
-#define STAT_EN_MASK			(0x00000001)
-#define STAT_PLAY_SHIFT			(1)
-#define STAT_PLAY_MASK			(0x00000002)
-#define STAT_MUTE_SHIFT			(2)
-#define STAT_MUTE_MASK			(0x00000004)
-#define STAT_SETUP_SHIFT		(3)
-#define STAT_SETUP_MASK			(0x00000008)
-#define STAT_FLUSH_SHIFT	    (4)
-#define STAT_FLUSH_MASK			(0x00000010)
-#define STAT_STOPMODE_SHIFT	    (5)
-#define STAT_STOPMODE_MASK		(0x00000020)
-
-/* Interrupt status */
-#define AUDIO_INTSTAT_OFFSET			(0x08)
-#define INTSTAT_CONTROL_SHIFT		(0)
-#define INTSTAT_CONTROL_MASK		(0x0000000f)
-#define INTSTAT_FIFO_SHIFT		(4)
-#define INTSTAT_FIFO_MASK		(0x000000f0)
-
-/* Configuration */
-#define AUDIO_DESTINATION_OFFSET		(0x0C)
-#define AUDIO_SAMPLE_RATE_OFFSET		(0x10)
-#define AUDIO_BIT_RATE_OFFSET			(0x14)
-#define AUDIO_VOLUME_OFFSET			(0x18)
-#define AUDIO_CHANNELS_OFFSET			(0x1C)
-
-/* Implemention of peterson's algorithm for shared memory semaphores */
-#define AUDIO_FLAG0_OFFSET			(0x20)
-#define AUDIO_FLAG1_OFFSET			(0x24)
-#define AUDIO_TURN_OFFSET			(0x28)
-
-/* Fifo registers */
-#define AUDIO_IN_WRITE_PTR_OFFSET		(0x30)
-#define AUDIO_IN_READ_PTR_OFFSET		(0x34)
-#define AUDIO_IN_FIFO_SIZE_OFFSET		(0x38)
-#define AUDIO_IN_FIFO_ENTRY_OFFSET		(0x3C)
-#define AUDIO_IN_FIFO_START_OFFSET		(0x40)
-
-/* 8 entries here of 4 words each = 0x80 gap from 0x50 */
-#define AUDIO_IN_FIFO_OFFSET			(0x50)
-
-#define AUDIO_OUT_WRITE_PTR_OFFSET		(0xD0)
-#define AUDIO_OUT_READ_PTR_OFFSET		(0xD4)
-#define AUDIO_OUT_FIFO_SIZE_OFFSET		(0xD8)
-#define AUDIO_OUT_FIFO_ENTRY_OFFSET		(0xDC)
-#define AUDIO_OUT_FIFO_START_OFFSET		(0xE0)
-
-/* 8 entries here of 4 words each = 0x80 gap from 0xF0 */
-#define AUDIO_OUT_FIFO_OFFSET			(0xF0)
+/* macros for alsa2chip and chip2alsa, instead of functions */
+
+#define alsa2chip(vol) (uint)(-((vol << 8) / 100))	/* convert alsa to chip volume (defined as macro rather than function call) */
+#define chip2alsa(vol) -((vol * 100) >> 8)			/* convert chip to alsa volume */
 
 /* Some constants for values .. */
 typedef enum {
@@ -153,15 +92,6 @@ typedef enum {
 	PCM_PLAYBACK_DEVICE,
 } SND_BCM2835_CTRL_T;
 
-/* this struct is tightly packed - its size is 16bytes */
-typedef struct {
-	uint32_t buffer_id;
-	uint32_t buffer_size;
-	uint32_t buffer_ptr;
-	uint32_t spare;
-
-} AUDIO_FIFO_ENTRY_T;
-
 /* definition of the chip-specific record */
 typedef struct bcm2835_chip {
 	struct snd_card *card;
@@ -172,20 +102,11 @@ typedef struct bcm2835_chip {
 	struct bcm2835_alsa_stream *alsa_stream[MAX_SUBSTREAMS];
 
 	int volume;
+	int old_volume; /* stores the volume value whist muted */
 	int dest;
 	int mute;
 } bcm2835_chip_t;
 
-typedef struct bcm2835_audio_buffer {
-	uint32_t buffer_id;
-	phys_addr_t bus_addr;
-	uint8_t __iomem *start;
-	uint32_t size;
-	uint32_t data_left;
-	struct list_head link;
-
-} bcm2835_audio_buffer_t;
-
 typedef struct bcm2835_alsa_stream {
 	bcm2835_chip_t *chip;
 	struct snd_pcm_substream *substream;
@@ -200,10 +121,6 @@ typedef struct bcm2835_alsa_stream {
 	int running;
 	int draining;
 
-#ifdef DUMP_RAW_DATA
-	/* for debug */
-	int file;
-#endif
 	unsigned int pos;
 	unsigned int buffer_size;
 	unsigned int period_size;
@@ -220,9 +137,6 @@ typedef struct bcm2835_alsa_stream {
 int snd_bcm2835_new_ctl(bcm2835_chip_t * chip);
 int snd_bcm2835_new_pcm(bcm2835_chip_t * chip);
 
-void bcm2835_audio_fifo_get_lock(bcm2835_alsa_stream_t * alsa_stream);
-void bcm2835_audio_fifo_put_lock(bcm2835_alsa_stream_t * alsa_stream);
-
 int bcm2835_audio_open(bcm2835_alsa_stream_t * alsa_stream);
 int bcm2835_audio_close(bcm2835_alsa_stream_t * alsa_stream);
 int bcm2835_audio_set_params(bcm2835_alsa_stream_t * alsa_stream,
@@ -234,7 +148,6 @@ int bcm2835_audio_stop(bcm2835_alsa_stream_t * alsa_stream);
 int bcm2835_audio_set_ctls(bcm2835_chip_t * chip);
 int bcm2835_audio_write(bcm2835_alsa_stream_t * alsa_stream, uint32_t count,
 			void *src);
-//uint32_t bcm2835_audio_buffers_consumed_bytes(bcm2835_alsa_stream_t *alsa_stream);
 uint32_t bcm2835_audio_retrieve_buffers(bcm2835_alsa_stream_t * alsa_stream);
 void bcm2835_audio_flush_buffers(bcm2835_alsa_stream_t * alsa_stream);
 void bcm2835_audio_flush_playback_buffers(bcm2835_alsa_stream_t * alsa_stream);
-- 
1.7.0.4

