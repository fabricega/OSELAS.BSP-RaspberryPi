From b50b5a289ba46c89973a97384e05ab66689ab0f3 Mon Sep 17 00:00:00 2001
From: popcornmix <popcornmix@gmail.com>
Date: Wed, 21 Nov 2012 23:41:35 +0000
Subject: [PATCH 172/195] Avoid the high load and block task messages by starting VCHIQka task later

---
 .../vc04_services/interface/vchiq_arm/vchiq_arm.c  |   29 +++++++++----------
 1 files changed, 14 insertions(+), 15 deletions(-)

diff --git a/drivers/misc/vc04_services/interface/vchiq_arm/vchiq_arm.c b/drivers/misc/vc04_services/interface/vchiq_arm/vchiq_arm.c
index 91edfd2..33519ea 100644
--- a/drivers/misc/vc04_services/interface/vchiq_arm/vchiq_arm.c
+++ b/drivers/misc/vc04_services/interface/vchiq_arm/vchiq_arm.c
@@ -1567,7 +1567,6 @@ VCHIQ_STATUS_T
 vchiq_arm_init_state(VCHIQ_STATE_T *state, VCHIQ_ARM_STATE_T *arm_state)
 {
 	VCHIQ_STATUS_T status = VCHIQ_SUCCESS;
-	char threadname[10];
 
 	if (arm_state) {
 		rwlock_init(&arm_state->susp_res_lock);
@@ -1594,19 +1593,6 @@ vchiq_arm_init_state(VCHIQ_STATE_T *state, VCHIQ_ARM_STATE_T *arm_state)
 		 * completion while things are waiting on the resume blocker */
 		complete_all(&arm_state->blocked_blocker);
 
-		snprintf(threadname, sizeof(threadname), "VCHIQka-%d",
-			state->id);
-		arm_state->ka_thread = kthread_create(
-			&vchiq_keepalive_thread_func,
-			(void *)state,
-			threadname);
-		if (arm_state->ka_thread == NULL) {
-			vchiq_log_error(vchiq_susp_log_level,
-				"vchiq: FATAL: couldn't create thread %s",
-				threadname);
-			status = VCHIQ_ERROR;
-		}
-
 		arm_state->suspend_timer_timeout = SUSPEND_TIMER_TIMEOUT_MS;
 		arm_state->suspend_timer_running = 0;
 		init_timer(&arm_state->suspend_timer);
@@ -2622,9 +2608,22 @@ void vchiq_platform_conn_state_changed(VCHIQ_STATE_T *state,
 	if (state->conn_state == VCHIQ_CONNSTATE_CONNECTED) {
 		write_lock_bh(&arm_state->susp_res_lock);
 		if (!arm_state->first_connect) {
+			char threadname[10];
 			arm_state->first_connect = 1;
 			write_unlock_bh(&arm_state->susp_res_lock);
-			wake_up_process(arm_state->ka_thread);
+			snprintf(threadname, sizeof(threadname), "VCHIQka-%d",
+				state->id);
+			arm_state->ka_thread = kthread_create(
+				&vchiq_keepalive_thread_func,
+				(void *)state,
+				threadname);
+			if (arm_state->ka_thread == NULL) {
+				vchiq_log_error(vchiq_susp_log_level,
+					"vchiq: FATAL: couldn't create thread %s",
+					threadname);
+			} else {
+				wake_up_process(arm_state->ka_thread);
+			}
 		} else
 			write_unlock_bh(&arm_state->susp_res_lock);
 	}
-- 
1.7.0.4

